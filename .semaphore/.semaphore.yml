# إصدار Semaphore
version: v1.0

# اسم الـ Pipeline
name: Validate and Deploy Pipeline

agent:
  machine:
    type: e1-standard-2 # نوع الجهاز الافتراضي
    os_image: ubuntu2004 # نظام التشغيل

blocks:
  # --- المرحلة الأولى: التحقق من الكود (كما هي) ---
  - name: "Validate with Maven"
    jobs:
      - name: "Run mvn install"
        commands:
          - checkout
          - cache restore
          - sem-version java 21
          - mvn clean install -DskipTests=false -Denforcer.skip=true
          - cache store

  # --- المرحلة الثانية: إرسال الأمر لـ Drone (معدّلة بالكامل) ---
  - name: "Trigger Drone Deployment"
    # "dependencies" تعني: لا تعمل هذه المرحلة إلا إذا نجحت المرحلة السابقة
    dependencies:
      - "Validate with Maven"
    
    jobs:
      - name: "Send CLI Command"
        # "when" شرط التشغيل: لا تشغل هذا الـ Job إلا إذا كان الـ Push على فرع main
        when: "branch = 'main'"
        
        # ربط الـ Secrets بالـ Job
        secrets:
          - name: DRONE_TOKEN
          - name: DRONE_SERVER

        commands:
          # 1. تثبيت Drone CLI
          - echo "Installing Drone CLI..."
          - wget -q https://github.com/harness/drone-cli/releases/latest/download/drone_linux_amd64.tar.gz
          - tar zxf drone_linux_amd64.tar.gz
          # نستخدم sudo install لوضعها في مكان قياسي
          - sudo install drone /usr/local/bin/

          # 2. إعداد الاتصال (الـ Secrets موجودة كمتغيرات بيئة الآن)
          - echo "Triggering Drone build for ${SEMAPHORE_GIT_REPO_SLUG} on branch main..."
          
          # 3. إرسال الأمر لـ Drone
          # ${SEMAPHORE_GIT_REPO_SLUG} هو متغير جاهز من Semaphore (مثل: mohamedelgarhy/spring-pet.clinic)
          # ${DRONE_SERVER} و ${DRONE_TOKEN} تأتي من الـ Secrets
          - drone build start ${SEMAPHORE_GIT_REPO_SLUG} main --server=${DRONE_SERVER} --token=${DRONE_TOKEN}


